name: Node.js Docker CI/CD Pipeline

on:
  push:
    branches:
      - "main"
      - "develop"
      - "feature/**"
      - "release/**"
      - "hotfix/**"
  pull_request:
    branches:
      - "main"
      - "develop"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - development
          - staging
          - production

# Environment configurations
env:
  # Customize these values for your app
  DOCKER_IMAGE: nodejs-app  # Change this to your app's name
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VERSION: ${{ github.sha }}
  # Configure your app's port (default: 3000)
  APP_PORT: 3000

defaults:
  run:
    working-directory: ./

jobs:
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      # Uncomment and customize these steps based on your project's needs
      # - name: Run ESLint
      #   run: npm run lint
      # - name: Check formatting
      #   run: npx prettier --check .

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test
      # Uncomment and configure if you're using code coverage
      # - name: Upload test coverage
      #   uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     file: ./coverage/lcov.info

  build:
    name: Build and Push Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  render-deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Trigger Render Deploy Hook
        run: curl -X POST "$RENDER_DEPLOY_HOOK"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
      # Health check (customize the health check endpoint if needed)
      - name: Start server in background
        run: |
          npm start &
          sleep 5
      - name: Health check with retries
        run: |
          for i in {1..10}; do
            if curl -f http://localhost:${{ env.APP_PORT }}/health 2>/dev/null; then
              echo "Server is up and running!"
              exit 0
            fi
            echo "Waiting for server to be ready... (Attempt $i/10)"
            sleep 2
          done
          echo "Health check failed after 10 attempts"
          exit 1

      - name: Stop background server
        if: always()
        run: |
          pkill -f "node" || echo "No node process found"
          # Ensure the port is freed
          fuser -k ${{ env.APP_PORT }}/tcp 2>/dev/null || true
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
