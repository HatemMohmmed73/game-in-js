name: Node.js Docker CI/CD Pipeline

on:
  push:
    branches:
      - "main"
      - "develop"
      - "feature/**"
      - "release/**"
      - "hotfix/**"
  pull_request:
    branches:
      - "main"
      - "develop"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - development
          - staging
          - production

# Environment configurations - CUSTOMIZE THESE FOR YOUR PROJECT
env:
  # Name for your Docker image (usually your app's name in lowercase)
  DOCKER_IMAGE: tic-tac-toe
  
  # Docker registry settings (using GitHub Container Registry by default)
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # App configuration - UPDATE THESE TO MATCH YOUR DOCKERFILE
  NODE_VERSION: "18"  # Node.js version to use for testing/linting
  APP_PORT: 10000      # Port your app listens on (must match EXPOSE in Dockerfile)
  HEALTH_CHECK_PATH: "/health"  # Health check endpoint (set to "" to disable)
  STARTUP_DELAY: 5    # Seconds to wait for the app to start before health checks

# Default working directory for all jobs
defaults:
  run:
    working-directory: ./

jobs:
  # Lint and validate code
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      
      # Check if ESLint is configured and run it
      - name: Check for ESLint config
        id: eslint
        run: |
          if [ -f "package.json" ] && (grep -q '"lint"' package.json || [ -f ".eslintrc" ] || [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]); then
            echo "eslint_configured=true" >> $GITHUB_OUTPUT
          else
            echo "eslint_configured=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run ESLint
        if: steps.eslint.outputs.eslint_configured == 'true'
        run: npm run lint
      
      # Check if Prettier is configured and run it
      - name: Check for Prettier config
        id: prettier
        run: |
          if [ -f "package.json" ] && (grep -q '"format:check"' package.json || [ -f ".prettierrc" ] || [ -f ".prettierrc.js" ] || [ -f ".prettierrc.json" ]); then
            echo "prettier_configured=true" >> $GITHUB_OUTPUT
          else
            echo "prettier_configured=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check formatting
        if: steps.prettier.outputs.prettier_configured == 'true'
        run: npx prettier --check .

  # Run tests
  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      # Check if tests are configured
      - name: Check for test script
        id: test_check
        run: |
          if [ -f "package.json" ] && grep -q '"test"' package.json; then
            echo "tests_configured=true" >> $GITHUB_OUTPUT
          else
            echo "tests_configured=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run tests
        if: steps.test_check.outputs.tests_configured == 'true'
        run: npm test
      
      # Check for and upload coverage if available
      - name: Check for coverage
        id: coverage_check
        if: steps.test_check.outputs.tests_configured == 'true'
        run: |
          if [ -d "coverage" ] && [ -f "coverage/lcov.info" ]; then
            echo "coverage_available=true" >> $GITHUB_OUTPUT
          else
            echo "coverage_available=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload test coverage
        if: steps.coverage_check.outputs.coverage_available == 'true' && github.event_name != 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN || 'dummy-token' }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # Build and push Docker image
  build:
    name: Build and Push Image
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Render using the built Docker image
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: build
    # Only run on push to main branch or on workflow_dispatch
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Get the built image tag from the build job
      - name: Get image tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            
      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT || github.token }}
          
      # Pull the built image to verify it's accessible
      - name: Verify image accessibility
        run: |
          docker pull ${{ steps.meta.outputs.tags }}
          
      # Trigger Render deployment using webhook
      - name: Trigger Render Deploy Hook
        if: env.RENDER_DEPLOY_HOOK != ''
        run: |
          echo "Triggering Render deployment..."
          curl -X POST "$RENDER_DEPLOY_HOOK"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK || '' }}
          
      # Health check (only runs if HEALTH_CHECK_PATH is set)
      - name: Start server in background for health check
        if: env.HEALTH_CHECK_PATH != ''
        run: |
          # Start the server in the background
          docker run -d -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
            --name healthcheck-container \
            -e PORT=${{ env.APP_PORT }} \
            ${{ steps.meta.outputs.tags }}
          # Wait for server to start
          sleep ${{ env.STARTUP_DELAY }}
          
      - name: Run health check
        if: env.HEALTH_CHECK_PATH != ''
        run: |
          for i in {1..10}; do
            if curl -f "http://localhost:${{ env.APP_PORT }}${{ env.HEALTH_CHECK_PATH }}" 2>/dev/null; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "⏳ Waiting for server to be ready... (Attempt $i/10)"
            sleep 2
          done
          echo "❌ Health check failed after 10 attempts"
          exit 1
          
      - name: Stop and clean up
        if: always()
        run: |
          # Stop and remove the test container
          docker rm -f healthcheck-container 2>/dev/null || true
          # Clean up any dangling images
          docker system prune -f
