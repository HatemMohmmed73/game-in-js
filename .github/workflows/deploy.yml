name: Tic-Tac-Toe CI/CD Pipeline

on:
  # Run on push to any branch
  push:
    branches-ignore: []
  # Run on pull requests
  pull_request:
    branches-ignore: []
  # Allow manual trigger
  workflow_dispatch:

# Environment configurations
env:
  DOCKER_IMAGE: tic-tac-toe-app
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USERNAME: ${{ github.actor }}
  DOCKER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  VERSION: ${{ github.sha }}

# Shared job defaults
defaults:
  run:
    working-directory: ./

jobs:
  # Lint and validate code
  lint:
    name: Lint and Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting
        run: npx prettier --check .

  # Run tests
  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info

  # Build and push Docker image
  build:
    name: Build and Push Image
    needs: test
    runs-on: ubuntu-latest
    # Always run this job when test job succeeds
    if: always() && needs.test.result == 'success'
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Render when changes are pushed to main
  deploy:
    name: Deploy to Render
    needs: build
    runs-on: ubuntu-latest
    # Only deploy on push to main branch and if build succeeded
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build.result == 'success'
    steps:
      - name: Trigger Render Deploy Hook
        run: |
          echo "ðŸš€ Triggering deployment to Render..."
          curl -X POST "$RENDER_DEPLOY_HOOK"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}

      - name: Verify deployment status
        run: echo "âœ… Deployment to Render triggered successfully!"
